// Code generated by MockGen. DO NOT EDIT.
// Source: v1/article/usecase (interfaces: ArticleUsecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	article "v1/article"

	gomock "github.com/golang/mock/gomock"
	mock "github.com/stretchr/testify/mock"
)

// MockArticleUsecase is a mock of ArticleUsecase interface
type MockArticleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockArticleUsecaseMockRecorder
	mock.Mock
}

// MockArticleUsecaseMockRecorder is the mock recorder for MockArticleUsecase
type MockArticleUsecaseMockRecorder struct {
	mock *MockArticleUsecase
}

// NewMockArticleUsecase creates a new mock instance
func NewMockArticleUsecase(ctrl *gomock.Controller) *MockArticleUsecase {
	mock := &MockArticleUsecase{ctrl: ctrl}
	mock.recorder = &MockArticleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleUsecase) EXPECT() *MockArticleUsecaseMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockArticleUsecase) Delete(arg0 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockArticleUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleUsecase)(nil).Delete), arg0)
}

// Fetch mocks base method
func (m *MockArticleUsecase) Fetch(arg0 string, arg1 int64) ([]*article.Article, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].([]*article.Article)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockArticleUsecaseMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockArticleUsecase)(nil).Fetch), arg0, arg1)
}

// GetByID mocks base method
func (m *MockArticleUsecase) GetByID(arg0 int64) (*article.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*article.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockArticleUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArticleUsecase)(nil).GetByID), arg0)
}

// GetByTitle mocks base method
func (m *MockArticleUsecase) GetByTitle(arg0 string) (*article.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", arg0)
	ret0, _ := ret[0].(*article.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle
func (mr *MockArticleUsecaseMockRecorder) GetByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockArticleUsecase)(nil).GetByTitle), arg0)
}

// Store mocks base method
func (m *MockArticleUsecase) Store(arg0 *article.Article) (*article.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(*article.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockArticleUsecaseMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleUsecase)(nil).Store), arg0)
}

// Update mocks base method
func (m *MockArticleUsecase) Update(arg0 *article.Article) (*article.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*article.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockArticleUsecaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleUsecase)(nil).Update), arg0)
}
